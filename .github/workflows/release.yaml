name: Release version

on:
  workflow_dispatch:
    inputs:
        version:
          description: 'Version to release'
          required: true
          default: 'patch'
          type: choice
          options:
            - patch
            - minor
            - major

jobs:
  release_version:
    name: Release version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - name: Set up Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - uses: Gr1N/setup-poetry@v8
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
      - run: poetry install
      - run: poetry run pytest
      - run: |
          VERSION=$(poetry version ${{ github.event.inputs.version }} --short)
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
        id: bump_version
      - run: poetry config repositories.testpypi https://test.pypi.org/legacy/
      - run: poetry config pypi-token.testpypi $PYPI_TOKEN
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}

      - run: poetry publish -r pypi --build

      - run: git tag ${{ steps.bump_version.outputs.version }}
      - run: git add pyproject.toml poetry.lock
      - run: git commit -m "Release ${{ steps.bump_version.outputs.version }} [skip ci]"
      - run: git push origin main --tags
      - run: |
          PRE_RELEASE_VERSION=$(poetry version prerelease --short)
          echo "pre_release_version=${PRE_RELEASE_VERSION}" >> "$GITHUB_OUTPUT"
        id: bump_version_prerelease
      - run: git add pyproject.toml poetry.lock
      - run: git commit -m "Setting prerelease version ${{ steps.bump_version_prerelease.outputs.pre_release_version }}"
      - run: git push origin main
